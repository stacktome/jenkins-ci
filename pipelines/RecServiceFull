podTemplate(label: 'mypod', containers: [
    containerTemplate(name: 'jnlp', image: 'gcr.io/fuzzylabs-1314/jnlp-slave-rec-service'),
    containerTemplate(name: 'sbt', image: 'hseeberger/scala-sbt', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'cloud-sdk', image: 'google/cloud-sdk', ttyEnabled: true, command: 'cat')
  ], volumes: [
    emptyDirVolume(mountPath: '/tmp/shared', memory: false),
    hostPathVolume(mountPath: '/home/jenkins/ivy-cache', hostPath: '/tmp/build-ivy-cache'),
    hostPathVolume(mountPath: '/usr/bin/docker', hostPath: '/usr/bin/docker'),
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
  ]
) {
    slackSend color: 'good', message: "Build scheduled: ${env.BUILD_URL} (branch=master)"

    node ('mypod') {
        
        try {
        
            stage 'Get code'
            git url: 'git@github.com:fuzzylabs/recommendation-service.git', branch: 'master'
            container('sbt') {
                stage 'Build docker image'
                
                sh "mkdir -p /home/jenkins/ivy-cache/${env.JOB_NAME}"
                sh "printf \"\n-ivy /home/jenkins/ivy-cache/${env.JOB_NAME}\n-no-colors\" > .sbtopts"
                
                sh 'sbt -no-colors test docker:publishLocal'
            }
            container('cloud-sdk') {
                stage 'Push docker image to registry'
                sh "docker tag eu.gcr.io/fuzzylabs-1314/rec-service-image:latest eu.gcr.io/fuzzylabs-1314/rec-service-image:v${env.BUILD_NUMBER}"
                sh "gcloud docker -- push eu.gcr.io/fuzzylabs-1314/rec-service-image:v${env.BUILD_NUMBER}"
                sh 'gcloud docker -- push eu.gcr.io/fuzzylabs-1314/rec-service-image:latest'
                sh 'gcloud config set compute/zone europe-west1-d'
                sh 'gcloud container clusters get-credentials rec-service-cluster'
                
                stage 'Deploy to production'
                sh "sed -i \"s/latest/v${env.BUILD_NUMBER}/g\" kubectl-deployment.yaml"
                sh 'kubectl replace -f kubectl-deployment.yaml --record'
                sh 'kubectl rollout status deployment/esp-rec-service-node'
            }
        
        } catch(exc) {
            slackSend color: 'danger', message: "Build failed: ${env.BUILD_URL}"
            throw exc
        }
        
        slackSend color: 'good', message: "Build completed: ${env.BUILD_URL}"
    }
}
